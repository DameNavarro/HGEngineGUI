<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows10.0.19041.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
    <RootNamespace>HGEngineGUI</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <Platforms>x86;x64;ARM64</Platforms>
    <RuntimeIdentifiers>win-x86;win-x64;win-arm64</RuntimeIdentifiers>
    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>
    <Nullable>enable</Nullable>
    <!-- Set default platform to avoid AnyCPU restore churn in VS -->
    <PlatformTarget>x64</PlatformTarget>
    <!-- Disable automatic Msix capability injection to prevent restore loops in some VS versions -->
    <DisableMsixProjectCapabilityAddedByProject>true</DisableMsixProjectCapabilityAddedByProject>
  </PropertyGroup>

  <!-- Ensure PlatformTarget matches selected RuntimeIdentifier/Platform to avoid publish conflicts -->
  <PropertyGroup Condition="'$(RuntimeIdentifier)'=='win-x86' or '$(Platform)'=='x86'">
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RuntimeIdentifier)'=='win-x64' or '$(Platform)'=='x64'">
    <PlatformTarget>x64</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RuntimeIdentifier)'=='win-arm64' or '$(Platform)'=='ARM64'">
    <PlatformTarget>ARM64</PlatformTarget>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="Assets\SplashScreen.scale-200.png" />
    <Content Include="Assets\LockScreenLogo.scale-200.png" />
    <Content Include="Assets\Square150x150Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Assets\StoreLogo.png" />
    <Content Include="Assets\Wide310x150Logo.scale-200.png" />
  </ItemGroup>

  <ItemGroup>
    <Manifest Include="$(ApplicationManifest)" />
  </ItemGroup>

  <!--
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true' and '$(DisableMsixProjectCapabilityAddedByProject)'!='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.26100.4654" />
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.7.250606001" />
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.3.2" />
  </ItemGroup>

  <!-- Remove explicit page includes; rely on SDK implicit items -->

  <!--
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution
    Explorer "Package and Publish" context menu entry to be enabled for this project even if
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>

  <!-- Publish Properties (disable trimming/ready-to-run to avoid VS ILLink errors during normal builds) -->
  <PropertyGroup>
    <PublishReadyToRun>False</PublishReadyToRun>
    <PublishTrimmed>False</PublishTrimmed>
    <SelfContained>False</SelfContained>
    <AppxPackageSigningEnabled>True</AppxPackageSigningEnabled>
  </PropertyGroup>

  <!-- Place RID outputs in the root TFM folder so packaging finds resources.pri at the expected path -->
  <PropertyGroup>
    <UseRidSpecificOutputFolders>false</UseRidSpecificOutputFolders>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
  </PropertyGroup>

  <!-- Workaround for packaging looking for resources.pri in non-RID output path -->
  <Target Name="CopyResourcesPriToRoot" AfterTargets="Build">
    <PropertyGroup>
      <_OutputPri>$(OutputPath)resources.pri</_OutputPri>
      <_RidPri>$(OutputPath)$(RuntimeIdentifier)\resources.pri</_RidPri>
      <_AppXPri>$(OutputPath)AppX\resources.pri</_AppXPri>
      <_RidAppXPri>$(OutputPath)$(RuntimeIdentifier)\AppX\resources.pri</_RidAppXPri>
      <_PlatformPri>$(OutputPath)win-$(PlatformTarget)\resources.pri</_PlatformPri>
      <_PlatformAppXPri>$(OutputPath)win-$(PlatformTarget)\AppX\resources.pri</_PlatformAppXPri>
      <_MsixPublishPri>$(OutputPath)$(RuntimeIdentifier)\msixpublish\resources.pri</_MsixPublishPri>
      <_PlatformMsixPublishPri>$(OutputPath)win-$(PlatformTarget)\msixpublish\resources.pri</_PlatformMsixPublishPri>
      <_DoubleRidMsixPublishPri>$(OutputPath)$(RuntimeIdentifier)\$(RuntimeIdentifier)\msixpublish\resources.pri</_DoubleRidMsixPublishPri>
    </PropertyGroup>
    <Copy SourceFiles="$(_RidPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_RidPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_AppXPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_AppXPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_RidAppXPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_RidAppXPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_PlatformPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_PlatformPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_PlatformAppXPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_PlatformAppXPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_MsixPublishPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_MsixPublishPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_PlatformMsixPublishPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_PlatformMsixPublishPri)') and !Exists('$(_OutputPri)')" />
    <Copy SourceFiles="$(_DoubleRidMsixPublishPri)" DestinationFiles="$(_OutputPri)" Condition="Exists('$(_DoubleRidMsixPublishPri)') and !Exists('$(_OutputPri)')" />
  </Target>
</Project>